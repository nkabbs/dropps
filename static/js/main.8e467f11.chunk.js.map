{"version":3,"sources":["components/LoadDealItem.js","components/LoadDeals.js","components/DealsPage.js","components/SubscriptionPage.js","components/OneTimeOrderPage.js","App.js","serviceWorker.js","index.js"],"names":["LoadDealItem","getStyle","background","props","loadDeal","selected","this","id","title","loadNumber","className","onClick","selectLoadDeal","bind","style","Component","LoadDeals","loadDeals","map","key","DealsPage","state","filter","x","Intl","NumberFormat","minimumFractionDigits","maximumFractionDigits","format","originalPrice","subscriptionPrice","showSubscriptionPage","showOneTimeOrderPage","SubscriptionPage","showDealsPage","OneTimeOrderPage","App","setState","ShowDealsPage","ShowSubscriptionPage","ShowOneTimeOrder","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.8e467f11.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport './../App.css'\r\n\r\nexport class LoadDealItem extends Component {\r\n    getStyle = () => {\r\n        return {\r\n            background: this.props.loadDeal.selected ? '#e3f3fb' : '#fff',\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { id, title, loadNumber } = this.props.loadDeal;\r\n        return (\r\n            <div className='Load-deal-item' onClick={this.props.selectLoadDeal.bind(this, id)} style={this.getStyle()}>\r\n                <div className='Title-text'>{title}</div>\r\n                <div className='Load-number'>{loadNumber} Loads</div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default LoadDealItem","import React, { Component } from 'react';\r\nimport LoadDealItem from './LoadDealItem';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass LoadDeals extends Component {\r\n    render() {\r\n        return this.props.loadDeals.map((loadDeal) => (\r\n            <LoadDealItem key={loadDeal.id} loadDeal={loadDeal} selectLoadDeal={this.props.selectLoadDeal}/>\r\n        ));\r\n    }  \r\n}\r\n\r\nLoadDeals.propTypes = {\r\n    loadDeals: PropTypes.array.isRequired\r\n}\r\n\r\nexport default LoadDeals    \r\n","import React, { Component } from 'react';\r\nimport LoadDeals from './LoadDeals';\r\nimport './../App.css';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport class DealsPage extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <header className=\"App-header\">\r\n                    <b>How Often Do You Wash?</b>\r\n                </header>\r\n                <LoadDeals loadDeals={this.props.state.loadDeals} selectLoadDeal={this.props.selectLoadDeal.bind(this)}/>\r\n                <div className='Title-text Subscription-rate'>\r\n                    {this.props.state.loadDeals.filter(loadDeal => loadDeal.selected == true).map(x => \r\n                        <div><strike>{Intl.NumberFormat('US-us', { minimumFractionDigits: 2, maximumFractionDigits: 2 }).format(x.originalPrice)}$</strike> <span>{Intl.NumberFormat('US-us', { minimumFractionDigits: 2, maximumFractionDigits: 2 }).format(x.subscriptionPrice)}$ with subscription</span></div>)\r\n                    }\r\n                </div>\r\n                <div className='Element Subscribe-button' onClick={this.props.showSubscriptionPage.bind(this)}>Subscribe & Save 30%</div>\r\n                <div className='Guarantee'>Pause, modify, or cancel anytime!</div>\r\n                <div className='Link' onClick={this.props.showOneTimeOrderPage.bind(this)}>One-Time Order</div>\r\n                <div>I prefer to dropp the subscription</div>\r\n            </div>\r\n        );      \r\n    }  \r\n}\r\n\r\nexport default DealsPage\r\n\r\n","import React, { Component } from 'react';\r\nimport './../App.css'\r\n\r\nexport class SubscriptionPage extends Component {\r\n    render() {\r\n        return (\r\n            <div className='App-header'>\r\n                <div className='Subscribe-message'>You selected Subscribe!</div>\r\n                <div className='Link Go-back' onClick={this.props.showDealsPage.bind(this)}>Go Back</div>\r\n            </div>\r\n        );      \r\n    }  \r\n}\r\n\r\nexport default SubscriptionPage    \r\n","import React, { Component } from 'react';\r\nimport './../App.css'\r\n\r\nexport class OneTimeOrderPage extends Component {\r\n    render() {\r\n        return (\r\n            <div className='App-header'>\r\n                <div className='Subscribe-message'>You selected <br />One-Time Order</div>\r\n                <div className='Link Go-back' onClick={this.props.showDealsPage.bind(this)}>Go Back</div>\r\n            </div>\r\n        );      \r\n    }  \r\n}\r\n\r\nexport default OneTimeOrderPage    \r\n","import React, { Component } from 'react';\nimport DealsPage from './components/DealsPage';\nimport './App.css';\nimport SubscriptionPage from './components/SubscriptionPage';\nimport OneTimeOrderPage from './components/OneTimeOrderPage';\n\nclass App extends Component {\n  selectLoadDeal = (id) => {\n    this.setState( { loadDeals: this.state.loadDeals.map(loadDeal => {\n      if (loadDeal.id === id) {\n        loadDeal.selected = true\n      } else {\n        loadDeal.selected = false\n      }\n      return loadDeal;\n    }) })\n  }\n\n  showDealsPage() {\n    this.setState({ \n      ShowDealsPage:  true,\n      ShowSubscriptionPage: false,\n      ShowOneTimeOrder: false\n    })\n  }\n\n  showSubscriptionPage() {\n    this.setState({ \n      ShowDealsPage:  false,\n      ShowSubscriptionPage: true,\n      ShowOneTimeOrder: false\n    })\n  }\n\n  showOneTimeOrderPage() {\n    this.setState({ \n      ShowDealsPage:  false,\n      ShowSubscriptionPage: false,\n      ShowOneTimeOrder: true\n    })\n  }\n\n  state = {\n    loadDeals: [\n      {\n        id: 1,\n        selected: true,\n        title: '1 - 4 Washes a Week',\n        loadNumber: 64,\n        originalPrice: 28,\n        subscriptionPrice: 19.60\n      },\n      {\n        id: 2,\n        selected: false,\n        title: '5 - 10 Washes a Week',\n        loadNumber: 160,\n        originalPrice: 52,\n        subscriptionPrice: 36\n      },\n      {\n        id: 3,\n        selected: false,\n        title: '11 - 15 Washes a Week',\n        loadNumber: 240,\n        originalPrice: 66,\n        subscriptionPrice: 46.20\n      }\n    ],\n    ShowDealsPage: true,\n    ShowSubscriptionPage: false,\n    ShowOneTimeOrder: false\n  }\n\n  render () {\n    if (this.state.ShowDealsPage) {\n      return (\n        <div className=\"Deals-page\">\n          <DealsPage showSubscriptionPage={() => {this.showSubscriptionPage()}} showOneTimeOrderPage={() => {this.showOneTimeOrderPage()}} state={this.state} selectLoadDeal={(id) => this.selectLoadDeal(id)} loadDeals={this.state.loadDeals} >\n          </DealsPage>\n        </div>\n      );\n    } else if (this.state.ShowSubscriptionPage) {\n      return (\n          <SubscriptionPage showDealsPage={() => {this.showDealsPage()}}></SubscriptionPage>\n      )\n    } else if (this.state.ShowOneTimeOrder){\n      return (\n        <OneTimeOrderPage showDealsPage={() => {this.showDealsPage()}}></OneTimeOrderPage>\n      )\n    }\n    return null\n  \n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}